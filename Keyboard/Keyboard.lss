
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00001194  00001228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  00800162  00800162  0000128a  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001e93  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000668  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a55a  00000000  00000000  0000250c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b72  00000000  00000000  0000ca66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003fd6  00000000  00000000  0000f5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f0c  00000000  00000000  000135b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003ca3  00000000  00000000  000144bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000066c1  00000000  00000000  0001815f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000720  00000000  00000000  0001e820  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	cd c0       	rjmp	.+410    	; 0x1a0 <__bad_interrupt>
       6:	00 00       	nop
       8:	cb c0       	rjmp	.+406    	; 0x1a0 <__bad_interrupt>
       a:	00 00       	nop
       c:	c9 c0       	rjmp	.+402    	; 0x1a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	c7 c0       	rjmp	.+398    	; 0x1a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c0       	rjmp	.+394    	; 0x1a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c0       	rjmp	.+390    	; 0x1a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c0       	rjmp	.+386    	; 0x1a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c0       	rjmp	.+382    	; 0x1a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c0       	rjmp	.+378    	; 0x1a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	66 c4       	rjmp	.+2252   	; 0x8f6 <__vector_10>
      2a:	00 00       	nop
      2c:	b9 c0       	rjmp	.+370    	; 0x1a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c0       	rjmp	.+366    	; 0x1a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c0       	rjmp	.+362    	; 0x1a0 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	b3 c0       	rjmp	.+358    	; 0x1a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c0       	rjmp	.+354    	; 0x1a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c0       	rjmp	.+350    	; 0x1a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c0       	rjmp	.+346    	; 0x1a0 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	ab c0       	rjmp	.+342    	; 0x1a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a9 c0       	rjmp	.+338    	; 0x1a0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a7 c0       	rjmp	.+334    	; 0x1a0 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	a5 c0       	rjmp	.+330    	; 0x1a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c0       	rjmp	.+326    	; 0x1a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c0       	rjmp	.+322    	; 0x1a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c0       	rjmp	.+318    	; 0x1a0 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	9d c0       	rjmp	.+314    	; 0x1a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c0       	rjmp	.+310    	; 0x1a0 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	99 c0       	rjmp	.+306    	; 0x1a0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	97 c0       	rjmp	.+302    	; 0x1a0 <__bad_interrupt>
      72:	00 00       	nop
      74:	95 c0       	rjmp	.+298    	; 0x1a0 <__bad_interrupt>
      76:	00 00       	nop
      78:	93 c0       	rjmp	.+294    	; 0x1a0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	91 c0       	rjmp	.+290    	; 0x1a0 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	8f c0       	rjmp	.+286    	; 0x1a0 <__bad_interrupt>
      82:	00 00       	nop
      84:	8d c0       	rjmp	.+282    	; 0x1a0 <__bad_interrupt>
      86:	00 00       	nop
      88:	8b c0       	rjmp	.+278    	; 0x1a0 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	89 c0       	rjmp	.+274    	; 0x1a0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	87 c0       	rjmp	.+270    	; 0x1a0 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	85 c0       	rjmp	.+266    	; 0x1a0 <__bad_interrupt>
      96:	00 00       	nop
      98:	6c 05       	cpc	r22, r12
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      9a:	8e 05       	cpc	r24, r14

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	72 06       	cpc	r7, r18
      9e:	8e 05       	cpc	r24, r14
      a0:	72 06       	cpc	r7, r18
      a2:	d0 05       	cpc	r29, r0
      a4:	f2 05       	cpc	r31, r2
      a6:	72 06       	cpc	r7, r18
      a8:	44 06       	cpc	r4, r20

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      aa:	56 06       	cpc	r5, r22

000000ac <ProductString>:
      ac:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      bc:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      cc:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000d4 <ManufacturerString>:
      d4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      e4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ee <LanguageString>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
      f2:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     102:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     112:	00 05                                               ..

00000114 <DeviceDescriptor>:
     114:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
     124:	00 01                                               ..

00000126 <KeyboardReport>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     136:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
				ReportSize     -= 4;
     146:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     156:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0 00     %.....)...u.....

00000166 <__ctors_end>:
				ReportSize     -= 2;
				ReportData     += 2;
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
				break;
     16c:	d0 e2       	ldi	r29, 0x20	; 32

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	e4 e9       	ldi	r30, 0x94	; 148
				ReportSize     -= 1;
     17a:	f1 e1       	ldi	r31, 0x11	; 17
     17c:	00 e0       	ldi	r16, 0x00	; 0
				ReportData     += 1;
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	0d 92       	st	X+, r0
     186:	a2 36       	cpi	r26, 0x62	; 98
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	a2 e6       	ldi	r26, 0x62	; 98
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a9 3c       	cpi	r26, 0xC9	; 201
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	74 d0       	rcall	.+232    	; 0x286 <main>
     19e:	f8 c7       	rjmp	.+4080   	; 0x1190 <_exit>

000001a0 <__bad_interrupt>:
     1a0:	2f cf       	rjmp	.-418    	; 0x0 <__vectors>

000001a2 <LEDs_SetAllLEDs>:
     1a2:	9b b1       	in	r25, 0x0b	; 11
     1a4:	80 95       	com	r24
     1a6:	90 64       	ori	r25, 0x40	; 64
     1a8:	89 23       	and	r24, r25

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1aa:	8b b9       	out	0x0b, r24	; 11
     1ac:	08 95       	ret

000001ae <CheckKeyboard>:
     1ae:	80 91 62 01 	lds	r24, 0x0162
     1b2:	8f 5f       	subi	r24, 0xFF	; 255
				break;
     1b4:	80 93 62 01 	sts	0x0162, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b8:	8a 30       	cpi	r24, 0x0A	; 10
     1ba:	00 f1       	brcs	.+64     	; 0x1fc <CheckKeyboard+0x4e>
     1bc:	80 91 63 01 	lds	r24, 0x0163
     1c0:	8f 5f       	subi	r24, 0xFF	; 255
     1c2:	88 30       	cpi	r24, 0x08	; 8
     1c4:	18 f4       	brcc	.+6      	; 0x1cc <CheckKeyboard+0x1e>
     1c6:	80 93 63 01 	sts	0x0163, r24
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <CheckKeyboard+0x22>
     1cc:	10 92 63 01 	sts	0x0163, r1
     1d0:	10 92 62 01 	sts	0x0162, r1
     1d4:	81 e0       	ldi	r24, 0x01	; 1
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	9c 01       	movw	r18, r24
     1da:	00 90 63 01 	lds	r0, 0x0163
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <CheckKeyboard+0x36>
     1e0:	22 0f       	add	r18, r18
     1e2:	33 1f       	adc	r19, r19
     1e4:	0a 94       	dec	r0
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <CheckKeyboard+0x32>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	24 b9       	out	0x04, r18	; 4
     1ea:	00 90 63 01 	lds	r0, 0x0163
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <CheckKeyboard+0x46>
     1f0:	88 0f       	add	r24, r24
     1f2:	99 1f       	adc	r25, r25
     1f4:	0a 94       	dec	r0
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <CheckKeyboard+0x42>
     1f8:	80 95       	com	r24
     1fa:	85 b9       	out	0x05, r24	; 5
     1fc:	8f e8       	ldi	r24, 0x8F	; 143
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	01 97       	sbiw	r24, 0x01	; 1
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     202:	f1 f7       	brne	.-4      	; 0x200 <CheckKeyboard+0x52>
     204:	00 c0       	rjmp	.+0      	; 0x206 <CheckKeyboard+0x58>
				break;
     206:	00 00       	nop
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	30 91 63 01 	lds	r19, 0x0163
     20c:	20 91 62 01 	lds	r18, 0x0162
     210:	82 2f       	mov	r24, r18
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	fc 01       	movw	r30, r24
     216:	4a e0       	ldi	r20, 0x0A	; 10
     218:	34 9f       	mul	r19, r20
     21a:	e0 0d       	add	r30, r0
     21c:	f1 1d       	adc	r31, r1
     21e:	11 24       	eor	r1, r1
     220:	28 30       	cpi	r18, 0x08	; 8
     222:	10 f4       	brcc	.+4      	; 0x228 <CheckKeyboard+0x7a>
     224:	4f b1       	in	r20, 0x0f	; 15
     226:	04 c0       	rjmp	.+8      	; 0x230 <CheckKeyboard+0x82>
     228:	46 b1       	in	r20, 0x06	; 6
     22a:	9c 01       	movw	r18, r24
     22c:	28 50       	subi	r18, 0x08	; 8
     22e:	31 09       	sbc	r19, r1
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	02 2e       	mov	r0, r18
     236:	01 c0       	rjmp	.+2      	; 0x23a <CheckKeyboard+0x8c>
     238:	88 0f       	add	r24, r24
     23a:	0a 94       	dec	r0
     23c:	ea f7       	brpl	.-6      	; 0x238 <CheckKeyboard+0x8a>
     23e:	48 23       	and	r20, r24
     240:	e4 59       	subi	r30, 0x94	; 148
     242:	fe 4f       	sbci	r31, 0xFE	; 254
     244:	40 83       	st	Z, r20
     246:	41 11       	cpse	r20, r1
     248:	06 c0       	rjmp	.+12     	; 0x256 <CheckKeyboard+0xa8>
     24a:	8f e8       	ldi	r24, 0x8F	; 143
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <CheckKeyboard+0xa0>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	00 c0       	rjmp	.+0      	; 0x254 <CheckKeyboard+0xa6>
     254:	00 00       	nop
     256:	08 95       	ret

00000258 <SetupHardware>:
     258:	84 b7       	in	r24, 0x34	; 52
     25a:	87 7f       	andi	r24, 0xF7	; 247
     25c:	84 bf       	out	0x34, r24	; 52
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	88 e1       	ldi	r24, 0x18	; 24
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	f8 94       	cli
     264:	80 93 60 00 	sts	0x0060, r24
     268:	10 92 60 00 	sts	0x0060, r1
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	90 e0       	ldi	r25, 0x00	; 0
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	80 e8       	ldi	r24, 0x80	; 128
				break;
     272:	0f b6       	in	r0, 0x3f	; 63

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	f8 94       	cli
     276:	80 93 61 00 	sts	0x0061, r24
     27a:	90 93 61 00 	sts	0x0061, r25
     27e:	0f be       	out	0x3f, r0	; 63
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	56 9a       	sbi	0x0a, 6	; 10
     282:	5e 9a       	sbi	0x0b, 6	; 11
				break;
     284:	1d c3       	rjmp	.+1594   	; 0x8c0 <USB_Init>

00000286 <main>:

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	e8 df       	rcall	.-48     	; 0x258 <SetupHardware>
     288:	80 e4       	ldi	r24, 0x40	; 64
     28a:	8b df       	rcall	.-234    	; 0x1a2 <LEDs_SetAllLEDs>
     28c:	78 94       	sei
     28e:	8f df       	rcall	.-226    	; 0x1ae <CheckKeyboard>
				break;
     290:	81 e5       	ldi	r24, 0x51	; 81

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	9d d6       	rcall	.+3386   	; 0xfd0 <HID_Device_USBTask>
     296:	3f d5       	rcall	.+2686   	; 0xd16 <USB_USBTask>
     298:	fa cf       	rjmp	.-12     	; 0x28e <main+0x8>

0000029a <EVENT_USB_Device_Connect>:
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	82 cf       	rjmp	.-252    	; 0x1a2 <LEDs_SetAllLEDs>

0000029e <EVENT_USB_Device_Disconnect>:
     29e:	80 e4       	ldi	r24, 0x40	; 64
				break;
     2a0:	80 cf       	rjmp	.-256    	; 0x1a2 <LEDs_SetAllLEDs>

000002a2 <EVENT_USB_Device_ConfigurationChanged>:

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	81 e5       	ldi	r24, 0x51	; 81
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	81 d6       	rcall	.+3330   	; 0xfaa <HID_Device_ConfigureEndpoints>
     2a8:	90 91 e2 00 	lds	r25, 0x00E2
				break;
     2ac:	94 60       	ori	r25, 0x04	; 4

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	90 93 e2 00 	sts	0x00E2, r25
     2b2:	88 23       	and	r24, r24
     2b4:	11 f0       	breq	.+4      	; 0x2ba <EVENT_USB_Device_ConfigurationChanged+0x18>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <EVENT_USB_Device_ConfigurationChanged+0x1a>
     2ba:	80 e4       	ldi	r24, 0x40	; 64
				break;
     2bc:	72 cf       	rjmp	.-284    	; 0x1a2 <LEDs_SetAllLEDs>

000002be <EVENT_USB_Device_ControlRequest>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	81 e5       	ldi	r24, 0x51	; 81
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	45 c5       	rjmp	.+2698   	; 0xd4e <HID_Device_ProcessControlRequest>

000002c4 <EVENT_USB_Device_StartOfFrame>:
     2c4:	80 91 5f 01 	lds	r24, 0x015F
     2c8:	90 91 60 01 	lds	r25, 0x0160
				break;
     2cc:	00 97       	sbiw	r24, 0x00	; 0
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	29 f0       	breq	.+10     	; 0x2da <EVENT_USB_Device_StartOfFrame+0x16>
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	90 93 60 01 	sts	0x0160, r25
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	80 93 5f 01 	sts	0x015F, r24
     2da:	08 95       	ret

000002dc <CALLBACK_HID_Device_CreateHIDReport>:

				if (ParserData->UsingReportIDs)
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	f9 01       	movw	r30, r18
     2e6:	46 b1       	in	r20, 0x06	; 6
     2e8:	80 91 00 01 	lds	r24, 0x0100
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	84 27       	eor	r24, r20
     2ee:	84 ff       	sbrs	r24, 4
     2f0:	04 c0       	rjmp	.+8      	; 0x2fa <CALLBACK_HID_Device_CreateHIDReport+0x1e>
     2f2:	89 e3       	ldi	r24, 0x39	; 57
     2f4:	82 83       	std	Z+2, r24	; 0x02
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <CALLBACK_HID_Device_CreateHIDReport+0x20>
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	40 93 00 01 	sts	0x0100, r20
     300:	46 ff       	sbrs	r20, 6
     302:	05 c0       	rjmp	.+10     	; 0x30e <CALLBACK_HID_Device_CreateHIDReport+0x32>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	6c e6       	ldi	r22, 0x6C	; 108
     306:	71 e0       	ldi	r23, 0x01	; 1
     308:	c1 e0       	ldi	r28, 0x01	; 1
     30a:	d1 e0       	ldi	r29, 0x01	; 1
     30c:	23 c0       	rjmp	.+70     	; 0x354 <CALLBACK_HID_Device_CreateHIDReport+0x78>
     30e:	24 2f       	mov	r18, r20
     310:	28 70       	andi	r18, 0x08	; 8
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	df 01       	movw	r26, r30
     316:	a8 0f       	add	r26, r24
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	b9 1f       	adc	r27, r25
     31a:	42 ff       	sbrs	r20, 2
     31c:	06 c0       	rjmp	.+12     	; 0x32a <CALLBACK_HID_Device_CreateHIDReport+0x4e>
     31e:	22 23       	and	r18, r18
     320:	11 f0       	breq	.+4      	; 0x326 <CALLBACK_HID_Device_CreateHIDReport+0x4a>
     322:	2e e3       	ldi	r18, 0x3E	; 62
     324:	07 c0       	rjmp	.+14     	; 0x334 <CALLBACK_HID_Device_CreateHIDReport+0x58>
     326:	2c e3       	ldi	r18, 0x3C	; 60
     328:	05 c0       	rjmp	.+10     	; 0x334 <CALLBACK_HID_Device_CreateHIDReport+0x58>
     32a:	22 23       	and	r18, r18
     32c:	11 f0       	breq	.+4      	; 0x332 <CALLBACK_HID_Device_CreateHIDReport+0x56>
     32e:	2d e3       	ldi	r18, 0x3D	; 61
     330:	01 c0       	rjmp	.+2      	; 0x334 <CALLBACK_HID_Device_CreateHIDReport+0x58>
     332:	2b e3       	ldi	r18, 0x3B	; 59
     334:	12 96       	adiw	r26, 0x02	; 2
     336:	2c 93       	st	X, r18
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	10 82       	st	Z, r1
     33a:	88 e0       	ldi	r24, 0x08	; 8
     33c:	90 e0       	ldi	r25, 0x00	; 0
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	d8 01       	movw	r26, r16
     340:	8d 93       	st	X+, r24
     342:	9c 93       	st	X, r25
     344:	30 c0       	rjmp	.+96     	; 0x3a6 <CALLBACK_HID_Device_CreateHIDReport+0xca>
     346:	21 96       	adiw	r28, 0x01	; 1
     348:	b1 e0       	ldi	r27, 0x01	; 1
     34a:	6c 3b       	cpi	r22, 0xBC	; 188
     34c:	7b 07       	cpc	r23, r27
     34e:	81 f0       	breq	.+32     	; 0x370 <CALLBACK_HID_Device_CreateHIDReport+0x94>
     350:	84 30       	cpi	r24, 0x04	; 4
     352:	70 f4       	brcc	.+28     	; 0x370 <CALLBACK_HID_Device_CreateHIDReport+0x94>
     354:	db 01       	movw	r26, r22
     356:	9d 91       	ld	r25, X+
     358:	bd 01       	movw	r22, r26
     35a:	91 11       	cpse	r25, r1
     35c:	f4 cf       	rjmp	.-24     	; 0x346 <CALLBACK_HID_Device_CreateHIDReport+0x6a>
     35e:	98 81       	ld	r25, Y
     360:	9f 01       	movw	r18, r30
     362:	28 0f       	add	r18, r24
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	31 1d       	adc	r19, r1
     366:	d9 01       	movw	r26, r18
     368:	12 96       	adiw	r26, 0x02	; 2
     36a:	9c 93       	st	X, r25
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	8f 5f       	subi	r24, 0xFF	; 255
     36e:	eb cf       	rjmp	.-42     	; 0x346 <CALLBACK_HID_Device_CreateHIDReport+0x6a>
     370:	47 ff       	sbrs	r20, 7
     372:	02 c0       	rjmp	.+4      	; 0x378 <CALLBACK_HID_Device_CreateHIDReport+0x9c>
     374:	10 82       	st	Z, r1
     376:	02 c0       	rjmp	.+4      	; 0x37c <CALLBACK_HID_Device_CreateHIDReport+0xa0>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	82 e0       	ldi	r24, 0x02	; 2
     37a:	80 83       	st	Z, r24
     37c:	45 fd       	sbrc	r20, 5
     37e:	03 c0       	rjmp	.+6      	; 0x386 <CALLBACK_HID_Device_CreateHIDReport+0xaa>
     380:	80 81       	ld	r24, Z
     382:	81 60       	ori	r24, 0x01	; 1
     384:	80 83       	st	Z, r24
     386:	84 2f       	mov	r24, r20
				break;
     388:	84 70       	andi	r24, 0x04	; 4

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	90 81       	ld	r25, Z
     38c:	89 2b       	or	r24, r25
     38e:	43 ff       	sbrs	r20, 3
     390:	02 c0       	rjmp	.+4      	; 0x396 <CALLBACK_HID_Device_CreateHIDReport+0xba>
     392:	90 e4       	ldi	r25, 0x40	; 64
     394:	01 c0       	rjmp	.+2      	; 0x398 <CALLBACK_HID_Device_CreateHIDReport+0xbc>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	89 2b       	or	r24, r25
     39a:	80 83       	st	Z, r24
     39c:	88 e0       	ldi	r24, 0x08	; 8
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	f8 01       	movw	r30, r16
     3a2:	91 83       	std	Z+1, r25	; 0x01
     3a4:	80 83       	st	Z, r24
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
				break;
     3b0:	08 95       	ret

000003b2 <CALLBACK_HID_Device_ProcessHIDReport>:
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	08 95       	ret

000003b4 <CALLBACK_USB_GetDescriptor>:
     3b4:	29 2f       	mov	r18, r25
     3b6:	33 27       	eor	r19, r19
     3b8:	23 30       	cpi	r18, 0x03	; 3
     3ba:	31 05       	cpc	r19, r1
     3bc:	b9 f0       	breq	.+46     	; 0x3ec <CALLBACK_USB_GetDescriptor+0x38>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	5c f4       	brge	.+22     	; 0x3d6 <CALLBACK_USB_GetDescriptor+0x22>
     3c0:	21 30       	cpi	r18, 0x01	; 1
     3c2:	31 05       	cpc	r19, r1
     3c4:	69 f1       	breq	.+90     	; 0x420 <CALLBACK_USB_GetDescriptor+0x6c>
     3c6:	22 30       	cpi	r18, 0x02	; 2
     3c8:	31 05       	cpc	r19, r1
     3ca:	79 f5       	brne	.+94     	; 0x42a <CALLBACK_USB_GetDescriptor+0x76>
     3cc:	82 e2       	ldi	r24, 0x22	; 34
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	22 ef       	ldi	r18, 0xF2	; 242
     3d2:	30 e0       	ldi	r19, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
     3d4:	2e c0       	rjmp	.+92     	; 0x432 <CALLBACK_USB_GetDescriptor+0x7e>
     3d6:	21 32       	cpi	r18, 0x21	; 33
     3d8:	31 05       	cpc	r19, r1
     3da:	e9 f0       	breq	.+58     	; 0x416 <CALLBACK_USB_GetDescriptor+0x62>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	22 32       	cpi	r18, 0x22	; 34
     3de:	31 05       	cpc	r19, r1
     3e0:	21 f5       	brne	.+72     	; 0x42a <CALLBACK_USB_GetDescriptor+0x76>
     3e2:	8f e3       	ldi	r24, 0x3F	; 63
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	26 e2       	ldi	r18, 0x26	; 38
     3e8:	31 e0       	ldi	r19, 0x01	; 1
     3ea:	23 c0       	rjmp	.+70     	; 0x432 <CALLBACK_USB_GetDescriptor+0x7e>
     3ec:	99 27       	eor	r25, r25
     3ee:	81 30       	cpi	r24, 0x01	; 1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	91 05       	cpc	r25, r1
     3f2:	41 f0       	breq	.+16     	; 0x404 <CALLBACK_USB_GetDescriptor+0x50>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	82 30       	cpi	r24, 0x02	; 2
     3f6:	91 05       	cpc	r25, r1
     3f8:	41 f0       	breq	.+16     	; 0x40a <CALLBACK_USB_GetDescriptor+0x56>
     3fa:	89 2b       	or	r24, r25
     3fc:	b1 f4       	brne	.+44     	; 0x42a <CALLBACK_USB_GetDescriptor+0x76>
     3fe:	ee ee       	ldi	r30, 0xEE	; 238
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	05 c0       	rjmp	.+10     	; 0x40e <CALLBACK_USB_GetDescriptor+0x5a>
     404:	e4 ed       	ldi	r30, 0xD4	; 212
     406:	f0 e0       	ldi	r31, 0x00	; 0
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	02 c0       	rjmp	.+4      	; 0x40e <CALLBACK_USB_GetDescriptor+0x5a>
     40a:	ec ea       	ldi	r30, 0xAC	; 172
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	84 91       	lpm	r24, Z
     410:	90 e0       	ldi	r25, 0x00	; 0
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	9f 01       	movw	r18, r30
     414:	0e c0       	rjmp	.+28     	; 0x432 <CALLBACK_USB_GetDescriptor+0x7e>
     416:	89 e0       	ldi	r24, 0x09	; 9
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	24 e0       	ldi	r18, 0x04	; 4
     41c:	31 e0       	ldi	r19, 0x01	; 1
     41e:	09 c0       	rjmp	.+18     	; 0x432 <CALLBACK_USB_GetDescriptor+0x7e>

				if (UsageListSize)
     420:	82 e1       	ldi	r24, 0x12	; 18
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	24 e1       	ldi	r18, 0x14	; 20
     426:	31 e0       	ldi	r19, 0x01	; 1
     428:	04 c0       	rjmp	.+8      	; 0x432 <CALLBACK_USB_GetDescriptor+0x7e>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	fa 01       	movw	r30, r20
     434:	31 83       	std	Z+1, r19	; 0x01
     436:	20 83       	st	Z, r18
     438:	08 95       	ret

0000043a <Endpoint_Write_Stream_LE>:
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	7c 01       	movw	r14, r24
					  UsageList[i - 1] = UsageList[i];
     44c:	8b 01       	movw	r16, r22
     44e:	ea 01       	movw	r28, r20
     450:	c2 d1       	rcall	.+900    	; 0x7d6 <Endpoint_WaitUntilReady>
     452:	81 11       	cpse	r24, r1

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	31 c0       	rjmp	.+98     	; 0x4b8 <Endpoint_Write_Stream_LE+0x7e>
     456:	20 97       	sbiw	r28, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	31 f0       	breq	.+12     	; 0x466 <Endpoint_Write_Stream_LE+0x2c>
     45a:	88 81       	ld	r24, Y
     45c:	99 81       	ldd	r25, Y+1	; 0x01
     45e:	08 1b       	sub	r16, r24
     460:	19 0b       	sbc	r17, r25
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	e8 0e       	add	r14, r24
     464:	f9 1e       	adc	r15, r25
     466:	c1 2c       	mov	r12, r1
     468:	d1 2c       	mov	r13, r1
     46a:	01 15       	cp	r16, r1
     46c:	11 05       	cpc	r17, r1
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	19 f1       	breq	.+70     	; 0x4b6 <Endpoint_Write_Stream_LE+0x7c>
     470:	80 91 e8 00 	lds	r24, 0x00E8
     474:	85 fd       	sbrc	r24, 5
     476:	14 c0       	rjmp	.+40     	; 0x4a0 <Endpoint_Write_Stream_LE+0x66>
     478:	80 91 e8 00 	lds	r24, 0x00E8
     47c:	8e 77       	andi	r24, 0x7E	; 126
     47e:	80 93 e8 00 	sts	0x00E8, r24
     482:	49 d4       	rcall	.+2194   	; 0xd16 <USB_USBTask>
     484:	20 97       	sbiw	r28, 0x00	; 0
     486:	41 f0       	breq	.+16     	; 0x498 <Endpoint_Write_Stream_LE+0x5e>
     488:	88 81       	ld	r24, Y
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	99 81       	ldd	r25, Y+1	; 0x01
     48c:	8c 0d       	add	r24, r12
     48e:	9d 1d       	adc	r25, r13
     490:	99 83       	std	Y+1, r25	; 0x01
     492:	88 83       	st	Y, r24
     494:	85 e0       	ldi	r24, 0x05	; 5
     496:	10 c0       	rjmp	.+32     	; 0x4b8 <Endpoint_Write_Stream_LE+0x7e>
     498:	9e d1       	rcall	.+828    	; 0x7d6 <Endpoint_WaitUntilReady>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	88 23       	and	r24, r24
     49c:	31 f3       	breq	.-52     	; 0x46a <Endpoint_Write_Stream_LE+0x30>
     49e:	0c c0       	rjmp	.+24     	; 0x4b8 <Endpoint_Write_Stream_LE+0x7e>
     4a0:	f7 01       	movw	r30, r14
     4a2:	81 91       	ld	r24, Z+
     4a4:	7f 01       	movw	r14, r30
     4a6:	80 93 f1 00 	sts	0x00F1, r24
     4aa:	01 50       	subi	r16, 0x01	; 1
				break;
     4ac:	11 09       	sbc	r17, r1
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	ff ef       	ldi	r31, 0xFF	; 255
     4b0:	cf 1a       	sub	r12, r31
     4b2:	df 0a       	sbc	r13, r31
     4b4:	da cf       	rjmp	.-76     	; 0x46a <Endpoint_Write_Stream_LE+0x30>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	08 95       	ret

000004ca <Endpoint_Write_Control_Stream_LE>:
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	20 91 c7 01 	lds	r18, 0x01C7
     4ce:	30 91 c8 01 	lds	r19, 0x01C8
     4d2:	26 17       	cp	r18, r22
     4d4:	37 07       	cpc	r19, r23
     4d6:	48 f0       	brcs	.+18     	; 0x4ea <Endpoint_Write_Control_Stream_LE+0x20>
     4d8:	61 15       	cp	r22, r1
     4da:	71 05       	cpc	r23, r1
     4dc:	39 f4       	brne	.+14     	; 0x4ec <Endpoint_Write_Control_Stream_LE+0x22>
     4de:	20 91 e8 00 	lds	r18, 0x00E8
     4e2:	2e 77       	andi	r18, 0x7E	; 126
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	20 93 e8 00 	sts	0x00E8, r18
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <Endpoint_Write_Control_Stream_LE+0x22>
     4ea:	b9 01       	movw	r22, r18
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 e0       	ldi	r18, 0x00	; 0
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	61 15       	cp	r22, r1
     4f2:	71 05       	cpc	r23, r1
     4f4:	99 f1       	breq	.+102    	; 0x55c <Endpoint_Write_Control_Stream_LE+0x92>
     4f6:	80 91 c0 01 	lds	r24, 0x01C0
     4fa:	88 23       	and	r24, r24
     4fc:	d9 f1       	breq	.+118    	; 0x574 <Endpoint_Write_Control_Stream_LE+0xaa>
     4fe:	85 30       	cpi	r24, 0x05	; 5
     500:	d9 f1       	breq	.+118    	; 0x578 <Endpoint_Write_Control_Stream_LE+0xae>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	80 91 e8 00 	lds	r24, 0x00E8
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	83 fd       	sbrc	r24, 3
     508:	33 c0       	rjmp	.+102    	; 0x570 <Endpoint_Write_Control_Stream_LE+0xa6>
     50a:	80 91 e8 00 	lds	r24, 0x00E8
     50e:	82 ff       	sbrs	r24, 2
     510:	06 c0       	rjmp	.+12     	; 0x51e <Endpoint_Write_Control_Stream_LE+0x54>
     512:	80 91 e8 00 	lds	r24, 0x00E8
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	82 ff       	sbrs	r24, 2
     518:	24 c0       	rjmp	.+72     	; 0x562 <Endpoint_Write_Control_Stream_LE+0x98>
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	08 95       	ret

					if (UsageListSize)
     51e:	80 91 e8 00 	lds	r24, 0x00E8
     522:	80 ff       	sbrs	r24, 0
     524:	e5 cf       	rjmp	.-54     	; 0x4f0 <Endpoint_Write_Control_Stream_LE+0x26>
     526:	80 91 f2 00 	lds	r24, 0x00F2
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     52a:	90 91 f3 00 	lds	r25, 0x00F3
     52e:	61 15       	cp	r22, r1
     530:	71 05       	cpc	r23, r1
     532:	51 f0       	breq	.+20     	; 0x548 <Endpoint_Write_Control_Stream_LE+0x7e>
     534:	88 30       	cpi	r24, 0x08	; 8
     536:	91 05       	cpc	r25, r1
     538:	38 f4       	brcc	.+14     	; 0x548 <Endpoint_Write_Control_Stream_LE+0x7e>
     53a:	21 91       	ld	r18, Z+
     53c:	20 93 f1 00 	sts	0x00F1, r18

						for (uint8_t i = 1; i < UsageListSize; i++)
     540:	61 50       	subi	r22, 0x01	; 1
     542:	71 09       	sbc	r23, r1
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	f3 cf       	rjmp	.-26     	; 0x52e <Endpoint_Write_Control_Stream_LE+0x64>
     548:	21 e0       	ldi	r18, 0x01	; 1
						  UsageList[i - 1] = UsageList[i];
     54a:	08 97       	sbiw	r24, 0x08	; 8
     54c:	09 f0       	breq	.+2      	; 0x550 <Endpoint_Write_Control_Stream_LE+0x86>
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	80 91 e8 00 	lds	r24, 0x00E8

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     554:	8e 77       	andi	r24, 0x7E	; 126
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	80 93 e8 00 	sts	0x00E8, r24
     55a:	ca cf       	rjmp	.-108    	; 0x4f0 <Endpoint_Write_Control_Stream_LE+0x26>
     55c:	21 11       	cpse	r18, r1
     55e:	cb cf       	rjmp	.-106    	; 0x4f6 <Endpoint_Write_Control_Stream_LE+0x2c>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	d8 cf       	rjmp	.-80     	; 0x512 <Endpoint_Write_Control_Stream_LE+0x48>
     562:	80 91 c0 01 	lds	r24, 0x01C0
     566:	88 23       	and	r24, r24
     568:	29 f0       	breq	.+10     	; 0x574 <Endpoint_Write_Control_Stream_LE+0xaa>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	85 30       	cpi	r24, 0x05	; 5
     56c:	91 f6       	brne	.-92     	; 0x512 <Endpoint_Write_Control_Stream_LE+0x48>
     56e:	04 c0       	rjmp	.+8      	; 0x578 <Endpoint_Write_Control_Stream_LE+0xae>
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	08 95       	ret
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	08 95       	ret
     578:	83 e0       	ldi	r24, 0x03	; 3
     57a:	08 95       	ret

0000057c <Endpoint_Read_Control_Stream_LE>:
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	61 15       	cp	r22, r1
     57e:	71 05       	cpc	r23, r1
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	29 f4       	brne	.+10     	; 0x58c <Endpoint_Read_Control_Stream_LE+0x10>
     582:	20 91 e8 00 	lds	r18, 0x00E8
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     586:	2b 77       	andi	r18, 0x7B	; 123
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	20 93 e8 00 	sts	0x00E8, r18
     58c:	61 15       	cp	r22, r1
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	71 05       	cpc	r23, r1
     590:	31 f1       	breq	.+76     	; 0x5de <Endpoint_Read_Control_Stream_LE+0x62>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	20 91 c0 01 	lds	r18, 0x01C0
     596:	22 23       	and	r18, r18
     598:	59 f1       	breq	.+86     	; 0x5f0 <Endpoint_Read_Control_Stream_LE+0x74>
     59a:	25 30       	cpi	r18, 0x05	; 5
     59c:	59 f1       	breq	.+86     	; 0x5f4 <Endpoint_Read_Control_Stream_LE+0x78>
     59e:	20 91 e8 00 	lds	r18, 0x00E8
     5a2:	23 fd       	sbrc	r18, 3
     5a4:	21 c0       	rjmp	.+66     	; 0x5e8 <Endpoint_Read_Control_Stream_LE+0x6c>
     5a6:	20 91 e8 00 	lds	r18, 0x00E8
     5aa:	22 ff       	sbrs	r18, 2

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	f2 cf       	rjmp	.-28     	; 0x592 <Endpoint_Read_Control_Stream_LE+0x16>
     5ae:	fc 01       	movw	r30, r24
     5b0:	cf 01       	movw	r24, r30
     5b2:	20 91 f2 00 	lds	r18, 0x00F2
     5b6:	30 91 f3 00 	lds	r19, 0x00F3
     5ba:	23 2b       	or	r18, r19

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	11 f3       	breq	.-60     	; 0x582 <Endpoint_Read_Control_Stream_LE+0x6>
     5be:	80 91 f1 00 	lds	r24, 0x00F1
     5c2:	81 93       	st	Z+, r24
     5c4:	cf 01       	movw	r24, r30
     5c6:	61 50       	subi	r22, 0x01	; 1
     5c8:	71 09       	sbc	r23, r1
     5ca:	61 15       	cp	r22, r1
     5cc:	71 05       	cpc	r23, r1
     5ce:	81 f7       	brne	.-32     	; 0x5b0 <Endpoint_Read_Control_Stream_LE+0x34>
     5d0:	d8 cf       	rjmp	.-80     	; 0x582 <Endpoint_Read_Control_Stream_LE+0x6>
     5d2:	80 91 c0 01 	lds	r24, 0x01C0
     5d6:	88 23       	and	r24, r24
     5d8:	59 f0       	breq	.+22     	; 0x5f0 <Endpoint_Read_Control_Stream_LE+0x74>
     5da:	85 30       	cpi	r24, 0x05	; 5
     5dc:	59 f0       	breq	.+22     	; 0x5f4 <Endpoint_Read_Control_Stream_LE+0x78>
     5de:	80 91 e8 00 	lds	r24, 0x00E8
     5e2:	80 ff       	sbrs	r24, 0
     5e4:	f6 cf       	rjmp	.-20     	; 0x5d2 <Endpoint_Read_Control_Stream_LE+0x56>
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <Endpoint_Read_Control_Stream_LE+0x70>
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	08 95       	ret
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	08 95       	ret
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	08 95       	ret

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	08 95       	ret

000005f8 <Endpoint_Write_Control_PStream_LE>:
     5f8:	20 91 c7 01 	lds	r18, 0x01C7
     5fc:	30 91 c8 01 	lds	r19, 0x01C8
					  return HID_PARSE_InsufficientReportItems;
     600:	26 17       	cp	r18, r22

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	37 07       	cpc	r19, r23
     604:	48 f0       	brcs	.+18     	; 0x618 <Endpoint_Write_Control_PStream_LE+0x20>
     606:	61 15       	cp	r22, r1
     608:	71 05       	cpc	r23, r1
     60a:	39 f4       	brne	.+14     	; 0x61a <Endpoint_Write_Control_PStream_LE+0x22>
     60c:	20 91 e8 00 	lds	r18, 0x00E8
     610:	2e 77       	andi	r18, 0x7E	; 126
     612:	20 93 e8 00 	sts	0x00E8, r18
     616:	01 c0       	rjmp	.+2      	; 0x61a <Endpoint_Write_Control_PStream_LE+0x22>
     618:	b9 01       	movw	r22, r18
     61a:	fc 01       	movw	r30, r24
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	61 15       	cp	r22, r1
     620:	71 05       	cpc	r23, r1
     622:	b1 f1       	breq	.+108    	; 0x690 <Endpoint_Write_Control_PStream_LE+0x98>
     624:	80 91 c0 01 	lds	r24, 0x01C0
     628:	88 23       	and	r24, r24
     62a:	09 f4       	brne	.+2      	; 0x62e <Endpoint_Write_Control_PStream_LE+0x36>
     62c:	3d c0       	rjmp	.+122    	; 0x6a8 <Endpoint_Write_Control_PStream_LE+0xb0>
     62e:	85 30       	cpi	r24, 0x05	; 5
     630:	09 f4       	brne	.+2      	; 0x634 <Endpoint_Write_Control_PStream_LE+0x3c>
     632:	3c c0       	rjmp	.+120    	; 0x6ac <Endpoint_Write_Control_PStream_LE+0xb4>
     634:	80 91 e8 00 	lds	r24, 0x00E8
     638:	83 fd       	sbrc	r24, 3
     63a:	34 c0       	rjmp	.+104    	; 0x6a4 <Endpoint_Write_Control_PStream_LE+0xac>
     63c:	80 91 e8 00 	lds	r24, 0x00E8
     640:	82 ff       	sbrs	r24, 2
     642:	06 c0       	rjmp	.+12     	; 0x650 <Endpoint_Write_Control_PStream_LE+0x58>
     644:	80 91 e8 00 	lds	r24, 0x00E8
     648:	82 ff       	sbrs	r24, 2
     64a:	25 c0       	rjmp	.+74     	; 0x696 <Endpoint_Write_Control_PStream_LE+0x9e>
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	08 95       	ret
     650:	80 91 e8 00 	lds	r24, 0x00E8
     654:	80 ff       	sbrs	r24, 0
     656:	e3 cf       	rjmp	.-58     	; 0x61e <Endpoint_Write_Control_PStream_LE+0x26>
     658:	80 91 f2 00 	lds	r24, 0x00F2
     65c:	90 91 f3 00 	lds	r25, 0x00F3
     660:	61 15       	cp	r22, r1
     662:	71 05       	cpc	r23, r1
     664:	59 f0       	breq	.+22     	; 0x67c <Endpoint_Write_Control_PStream_LE+0x84>
     666:	88 30       	cpi	r24, 0x08	; 8
     668:	91 05       	cpc	r25, r1
     66a:	40 f4       	brcc	.+16     	; 0x67c <Endpoint_Write_Control_PStream_LE+0x84>
     66c:	24 91       	lpm	r18, Z
     66e:	20 93 f1 00 	sts	0x00F1, r18
     672:	31 96       	adiw	r30, 0x01	; 1
     674:	61 50       	subi	r22, 0x01	; 1
     676:	71 09       	sbc	r23, r1
     678:	01 96       	adiw	r24, 0x01	; 1
     67a:	f2 cf       	rjmp	.-28     	; 0x660 <Endpoint_Write_Control_PStream_LE+0x68>
     67c:	21 e0       	ldi	r18, 0x01	; 1
     67e:	08 97       	sbiw	r24, 0x08	; 8
     680:	09 f0       	breq	.+2      	; 0x684 <Endpoint_Write_Control_PStream_LE+0x8c>
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	80 91 e8 00 	lds	r24, 0x00E8
					  ParserData->TotalReportItems++;
     688:	8e 77       	andi	r24, 0x7E	; 126
     68a:	80 93 e8 00 	sts	0x00E8, r24
     68e:	c7 cf       	rjmp	.-114    	; 0x61e <Endpoint_Write_Control_PStream_LE+0x26>
     690:	21 11       	cpse	r18, r1

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	c8 cf       	rjmp	.-112    	; 0x624 <Endpoint_Write_Control_PStream_LE+0x2c>
     694:	d7 cf       	rjmp	.-82     	; 0x644 <Endpoint_Write_Control_PStream_LE+0x4c>
     696:	80 91 c0 01 	lds	r24, 0x01C0
     69a:	88 23       	and	r24, r24
     69c:	29 f0       	breq	.+10     	; 0x6a8 <Endpoint_Write_Control_PStream_LE+0xb0>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	85 30       	cpi	r24, 0x05	; 5
     6a0:	89 f6       	brne	.-94     	; 0x644 <Endpoint_Write_Control_PStream_LE+0x4c>
     6a2:	04 c0       	rjmp	.+8      	; 0x6ac <Endpoint_Write_Control_PStream_LE+0xb4>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	08 95       	ret
     6a8:	82 e0       	ldi	r24, 0x02	; 2
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	08 95       	ret
     6ac:	83 e0       	ldi	r24, 0x03	; 3
     6ae:	08 95       	ret

000006b0 <Endpoint_ConfigureEndpoint_Prv>:
     6b0:	98 2f       	mov	r25, r24
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	97 30       	cpi	r25, 0x07	; 7
     6b4:	58 f5       	brcc	.+86     	; 0x70c <Endpoint_ConfigureEndpoint_Prv+0x5c>
     6b6:	90 93 e9 00 	sts	0x00E9, r25
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	98 17       	cp	r25, r24
     6bc:	39 f0       	breq	.+14     	; 0x6cc <Endpoint_ConfigureEndpoint_Prv+0x1c>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	70 91 ec 00 	lds	r23, 0x00EC
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	20 91 ed 00 	lds	r18, 0x00ED
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	50 91 f0 00 	lds	r21, 0x00F0
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <Endpoint_ConfigureEndpoint_Prv+0x22>
     6cc:	24 2f       	mov	r18, r20

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	76 2f       	mov	r23, r22
     6d0:	50 e0       	ldi	r21, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	21 ff       	sbrs	r18, 1
     6d4:	19 c0       	rjmp	.+50     	; 0x708 <Endpoint_ConfigureEndpoint_Prv+0x58>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	30 91 eb 00 	lds	r19, 0x00EB

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6da:	3e 7f       	andi	r19, 0xFE	; 254
     6dc:	30 93 eb 00 	sts	0x00EB, r19
     6e0:	30 91 ed 00 	lds	r19, 0x00ED
     6e4:	3d 7f       	andi	r19, 0xFD	; 253
     6e6:	30 93 ed 00 	sts	0x00ED, r19
     6ea:	30 91 eb 00 	lds	r19, 0x00EB
     6ee:	31 60       	ori	r19, 0x01	; 1
     6f0:	30 93 eb 00 	sts	0x00EB, r19
     6f4:	70 93 ec 00 	sts	0x00EC, r23
     6f8:	20 93 ed 00 	sts	0x00ED, r18
     6fc:	50 93 f0 00 	sts	0x00F0, r21
     700:	20 91 ee 00 	lds	r18, 0x00EE
     704:	27 ff       	sbrs	r18, 7
     706:	07 c0       	rjmp	.+14     	; 0x716 <Endpoint_ConfigureEndpoint_Prv+0x66>
     708:	9f 5f       	subi	r25, 0xFF	; 255
     70a:	d3 cf       	rjmp	.-90     	; 0x6b2 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     70c:	8f 70       	andi	r24, 0x0F	; 15
     70e:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     716:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     718:	08 95       	ret

0000071a <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	06 2f       	mov	r16, r22
     724:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     726:	10 e0       	ldi	r17, 0x00	; 0
     728:	10 17       	cp	r17, r16
     72a:	71 f1       	breq	.+92     	; 0x788 <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
     72c:	98 81       	ld	r25, Y
     72e:	99 23       	and	r25, r25
     730:	41 f1       	breq	.+80     	; 0x782 <Endpoint_ConfigureEndpointTable+0x68>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     732:	2c 81       	ldd	r18, Y+4	; 0x04
     734:	e9 81       	ldd	r30, Y+1	; 0x01
     736:	fa 81       	ldd	r31, Y+2	; 0x02
     738:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     73a:	89 2f       	mov	r24, r25
     73c:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     73e:	87 30       	cpi	r24, 0x07	; 7
     740:	10 f0       	brcs	.+4      	; 0x746 <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	22 c0       	rjmp	.+68     	; 0x78a <Endpoint_ConfigureEndpointTable+0x70>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     746:	22 30       	cpi	r18, 0x02	; 2
     748:	10 f0       	brcs	.+4      	; 0x74e <Endpoint_ConfigureEndpointTable+0x34>
     74a:	56 e0       	ldi	r21, 0x06	; 6
     74c:	01 c0       	rjmp	.+2      	; 0x750 <Endpoint_ConfigureEndpointTable+0x36>
     74e:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     750:	28 e0       	ldi	r18, 0x08	; 8
     752:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     754:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     756:	2e 17       	cp	r18, r30
     758:	3f 07       	cpc	r19, r31
     75a:	20 f4       	brcc	.+8      	; 0x764 <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
     75c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     75e:	22 0f       	add	r18, r18
     760:	33 1f       	adc	r19, r19
     762:	f9 cf       	rjmp	.-14     	; 0x756 <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
     764:	42 95       	swap	r20
     766:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     768:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     76a:	69 2f       	mov	r22, r25
     76c:	66 1f       	adc	r22, r22
     76e:	66 27       	eor	r22, r22
     770:	66 1f       	adc	r22, r22
     772:	90 e4       	ldi	r25, 0x40	; 64
     774:	79 9f       	mul	r23, r25
     776:	90 01       	movw	r18, r0
     778:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     77a:	62 2b       	or	r22, r18
     77c:	99 df       	rcall	.-206    	; 0x6b0 <Endpoint_ConfigureEndpoint_Prv>
     77e:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     780:	01 f3       	breq	.-64     	; 0x742 <Endpoint_ConfigureEndpointTable+0x28>
     782:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     784:	25 96       	adiw	r28, 0x05	; 5
     786:	d0 cf       	rjmp	.-96     	; 0x728 <Endpoint_ConfigureEndpointTable+0xe>
     788:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     78a:	df 91       	pop	r29
}
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <Endpoint_ClearStatusStage>:
     794:	80 91 c1 01 	lds	r24, 0x01C1
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     798:	87 fd       	sbrc	r24, 7
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     79c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     7a0:	80 ff       	sbrs	r24, 0
     7a2:	0e c0       	rjmp	.+28     	; 0x7c0 <Endpoint_ClearStatusStage+0x2c>
     7a4:	12 c0       	rjmp	.+36     	; 0x7ca <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7a6:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     7aa:	82 fd       	sbrc	r24, 2
     7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7ae:	80 91 c0 01 	lds	r24, 0x01C0
     7b2:	81 11       	cpse	r24, r1
     7b4:	f8 cf       	rjmp	.-16     	; 0x7a6 <Endpoint_ClearStatusStage+0x12>
     7b6:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7b8:	80 91 e8 00 	lds	r24, 0x00E8
     7bc:	8b 77       	andi	r24, 0x7B	; 123
     7be:	08 c0       	rjmp	.+16     	; 0x7d0 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7c0:	80 91 c0 01 	lds	r24, 0x01C0
     7c4:	81 11       	cpse	r24, r1
     7c6:	ea cf       	rjmp	.-44     	; 0x79c <Endpoint_ClearStatusStage+0x8>
     7c8:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7ca:	80 91 e8 00 	lds	r24, 0x00E8
     7ce:	8e 77       	andi	r24, 0x7E	; 126
     7d0:	80 93 e8 00 	sts	0x00E8, r24
     7d4:	08 95       	ret

000007d6 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     7d6:	80 91 e4 00 	lds	r24, 0x00E4
     7da:	90 91 e5 00 	lds	r25, 0x00E5
     7de:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     7e0:	20 91 ec 00 	lds	r18, 0x00EC
     7e4:	20 ff       	sbrs	r18, 0
     7e6:	21 c0       	rjmp	.+66     	; 0x82a <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7e8:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     7ec:	20 fd       	sbrc	r18, 0
     7ee:	21 c0       	rjmp	.+66     	; 0x832 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7f0:	20 91 c0 01 	lds	r18, 0x01C0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7f4:	22 23       	and	r18, r18
     7f6:	89 f0       	breq	.+34     	; 0x81a <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7f8:	25 30       	cpi	r18, 0x05	; 5
     7fa:	89 f0       	breq	.+34     	; 0x81e <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     7fc:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     800:	25 fd       	sbrc	r18, 5
     802:	0f c0       	rjmp	.+30     	; 0x822 <Endpoint_WaitUntilReady+0x4c>
     804:	20 91 e4 00 	lds	r18, 0x00E4
     808:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     80c:	28 17       	cp	r18, r24
     80e:	39 07       	cpc	r19, r25
     810:	39 f3       	breq	.-50     	; 0x7e0 <Endpoint_WaitUntilReady+0xa>
     812:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     814:	41 f0       	breq	.+16     	; 0x826 <Endpoint_WaitUntilReady+0x50>
     816:	c9 01       	movw	r24, r18
     818:	e3 cf       	rjmp	.-58     	; 0x7e0 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     826:	84 e0       	ldi	r24, 0x04	; 4
     828:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     82a:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     82e:	22 ff       	sbrs	r18, 2
     830:	df cf       	rjmp	.-66     	; 0x7f0 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	08 95       	ret

00000836 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     83e:	4e d0       	rcall	.+156    	; 0x8dc <USB_INT_DisableAllInterrupts>
     840:	55 d0       	rcall	.+170    	; 0x8ec <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     842:	c8 ed       	ldi	r28, 0xD8	; 216
     844:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     846:	88 81       	ld	r24, Y
     848:	8f 77       	andi	r24, 0x7F	; 127
     84a:	88 83       	st	Y, r24
     84c:	88 81       	ld	r24, Y
     84e:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     850:	88 83       	st	Y, r24
     852:	88 81       	ld	r24, Y
     854:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     856:	88 83       	st	Y, r24
     858:	e7 ed       	ldi	r30, 0xD7	; 215
     85a:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     85c:	80 81       	ld	r24, Z
     85e:	80 68       	ori	r24, 0x80	; 128
     860:	80 83       	st	Z, r24
     862:	19 bc       	out	0x29, r1	; 41
     864:	10 92 c0 01 	sts	0x01C0, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     868:	10 92 bc 01 	sts	0x01BC, r1
	USB_Device_ConfigurationNumber  = 0;
     86c:	10 92 be 01 	sts	0x01BE, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     870:	10 92 bd 01 	sts	0x01BD, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     874:	00 ee       	ldi	r16, 0xE0	; 224
     876:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     878:	f8 01       	movw	r30, r16
     87a:	80 81       	ld	r24, Z
     87c:	8b 7f       	andi	r24, 0xFB	; 251
     87e:	80 83       	st	Z, r24
     880:	88 81       	ld	r24, Y
     882:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     884:	88 83       	st	Y, r24
     886:	42 e0       	ldi	r20, 0x02	; 2
     888:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	11 df       	rcall	.-478    	; 0x6b0 <Endpoint_ConfigureEndpoint_Prv>
     88e:	e1 ee       	ldi	r30, 0xE1	; 225
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     894:	8e 7f       	andi	r24, 0xFE	; 254
     896:	80 83       	st	Z, r24
     898:	e2 ee       	ldi	r30, 0xE2	; 226
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     89e:	81 60       	ori	r24, 0x01	; 1
     8a0:	80 83       	st	Z, r24
     8a2:	80 81       	ld	r24, Z
     8a4:	88 60       	ori	r24, 0x08	; 8
     8a6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     8a8:	f8 01       	movw	r30, r16
     8aa:	80 81       	ld	r24, Z
     8ac:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     8ae:	80 83       	st	Z, r24
     8b0:	88 81       	ld	r24, Y
     8b2:	80 61       	ori	r24, 0x10	; 16
     8b4:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     8bc:	0f 91       	pop	r16
     8be:	08 95       	ret

000008c0 <USB_Init>:
     8c0:	e8 ed       	ldi	r30, 0xD8	; 216
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     8c6:	8f 7e       	andi	r24, 0xEF	; 239
     8c8:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     8ca:	e7 ed       	ldi	r30, 0xD7	; 215
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	81 60       	ori	r24, 0x01	; 1
     8d2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	80 93 bf 01 	sts	0x01BF, r24

	USB_ResetInterface();
     8da:	ad cf       	rjmp	.-166    	; 0x836 <USB_ResetInterface>

000008dc <USB_INT_DisableAllInterrupts>:
     8dc:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	80 81       	ld	r24, Z
     8e2:	8c 7f       	andi	r24, 0xFC	; 252
     8e4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     8e6:	10 92 e2 00 	sts	0x00E2, r1
     8ea:	08 95       	ret

000008ec <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     8ec:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     8f0:	10 92 e1 00 	sts	0x00E1, r1
     8f4:	08 95       	ret

000008f6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     8f6:	1f 92       	push	r1
     8f8:	0f 92       	push	r0
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	0f 92       	push	r0
     8fe:	11 24       	eor	r1, r1
     900:	0b b6       	in	r0, 0x3b	; 59
     902:	0f 92       	push	r0
     904:	2f 93       	push	r18
     906:	3f 93       	push	r19
     908:	4f 93       	push	r20
     90a:	5f 93       	push	r21
     90c:	6f 93       	push	r22
     90e:	7f 93       	push	r23
     910:	8f 93       	push	r24
     912:	9f 93       	push	r25
     914:	af 93       	push	r26
     916:	bf 93       	push	r27
     918:	ef 93       	push	r30
     91a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     91c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     920:	82 ff       	sbrs	r24, 2
     922:	0a c0       	rjmp	.+20     	; 0x938 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     924:	80 91 e2 00 	lds	r24, 0x00E2
     928:	82 ff       	sbrs	r24, 2
     92a:	06 c0       	rjmp	.+12     	; 0x938 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     92c:	80 91 e1 00 	lds	r24, 0x00E1
     930:	8b 7f       	andi	r24, 0xFB	; 251
     932:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     936:	c6 dc       	rcall	.-1652   	; 0x2c4 <EVENT_USB_Device_StartOfFrame>
     938:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     93c:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     93e:	1d c0       	rjmp	.+58     	; 0x97a <__vector_10+0x84>
     940:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     944:	80 ff       	sbrs	r24, 0
     946:	19 c0       	rjmp	.+50     	; 0x97a <__vector_10+0x84>
     948:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     94c:	8e 7f       	andi	r24, 0xFE	; 254
     94e:	80 93 da 00 	sts	0x00DA, r24
     952:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     956:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     958:	0c c0       	rjmp	.+24     	; 0x972 <__vector_10+0x7c>
     95a:	84 e1       	ldi	r24, 0x14	; 20

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     95c:	89 bd       	out	0x29, r24	; 41
     95e:	86 e1       	ldi	r24, 0x16	; 22
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     960:	89 bd       	out	0x29, r24	; 41
     962:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     964:	00 fe       	sbrs	r0, 0
     966:	fd cf       	rjmp	.-6      	; 0x962 <__vector_10+0x6c>
     968:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     96a:	80 93 c0 01 	sts	0x01C0, r24
     96e:	95 dc       	rcall	.-1750   	; 0x29a <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     970:	04 c0       	rjmp	.+8      	; 0x97a <__vector_10+0x84>
     972:	19 bc       	out	0x29, r1	; 41
     974:	10 92 c0 01 	sts	0x01C0, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     978:	92 dc       	rcall	.-1756   	; 0x29e <EVENT_USB_Device_Disconnect>
     97a:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     97e:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     980:	18 c0       	rjmp	.+48     	; 0x9b2 <__vector_10+0xbc>
     982:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     986:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     988:	14 c0       	rjmp	.+40     	; 0x9b2 <__vector_10+0xbc>
     98a:	80 91 e2 00 	lds	r24, 0x00E2
     98e:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     990:	80 93 e2 00 	sts	0x00E2, r24
     994:	80 91 e2 00 	lds	r24, 0x00E2
     998:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     99a:	80 93 e2 00 	sts	0x00E2, r24
     99e:	80 91 d8 00 	lds	r24, 0x00D8
     9a2:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     9a4:	80 93 d8 00 	sts	0x00D8, r24
     9a8:	19 bc       	out	0x29, r1	; 41
     9aa:	85 e0       	ldi	r24, 0x05	; 5
     9ac:	80 93 c0 01 	sts	0x01C0, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     9b0:	b1 d1       	rcall	.+866    	; 0xd14 <USB_Event_Stub>
     9b2:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     9b6:	84 ff       	sbrs	r24, 4
     9b8:	2f c0       	rjmp	.+94     	; 0xa18 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     9ba:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     9be:	84 ff       	sbrs	r24, 4
     9c0:	2b c0       	rjmp	.+86     	; 0xa18 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     9c2:	84 e1       	ldi	r24, 0x14	; 20
     9c4:	89 bd       	out	0x29, r24	; 41
     9c6:	86 e1       	ldi	r24, 0x16	; 22
     9c8:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9ca:	09 b4       	in	r0, 0x29	; 41
     9cc:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9ce:	fd cf       	rjmp	.-6      	; 0x9ca <__vector_10+0xd4>
     9d0:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     9d4:	8f 7d       	andi	r24, 0xDF	; 223
     9d6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9da:	80 91 e1 00 	lds	r24, 0x00E1
     9de:	8f 7e       	andi	r24, 0xEF	; 239
     9e0:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     9e4:	80 91 e2 00 	lds	r24, 0x00E2
     9e8:	8f 7e       	andi	r24, 0xEF	; 239
     9ea:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     9ee:	80 91 e2 00 	lds	r24, 0x00E2
     9f2:	81 60       	ori	r24, 0x01	; 1
     9f4:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     9f8:	80 91 bc 01 	lds	r24, 0x01BC
     9fc:	88 23       	and	r24, r24
     9fe:	11 f0       	breq	.+4      	; 0xa04 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     a00:	84 e0       	ldi	r24, 0x04	; 4
     a02:	07 c0       	rjmp	.+14     	; 0xa12 <__vector_10+0x11c>
     a04:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
     a08:	87 ff       	sbrs	r24, 7
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a0c:	83 e0       	ldi	r24, 0x03	; 3
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	80 93 c0 01 	sts	0x01C0, r24
     a16:	7e d1       	rcall	.+764    	; 0xd14 <USB_Event_Stub>
     a18:	80 91 e1 00 	lds	r24, 0x00E1
     a1c:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     a1e:	22 c0       	rjmp	.+68     	; 0xa64 <__vector_10+0x16e>
     a20:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     a24:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a26:	1e c0       	rjmp	.+60     	; 0xa64 <__vector_10+0x16e>
     a28:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     a2c:	87 7f       	andi	r24, 0xF7	; 247
     a2e:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	80 93 c0 01 	sts	0x01C0, r24
     a38:	10 92 bc 01 	sts	0x01BC, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     a3c:	80 91 e1 00 	lds	r24, 0x00E1
     a40:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     a42:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a46:	80 91 e2 00 	lds	r24, 0x00E2
     a4a:	8e 7f       	andi	r24, 0xFE	; 254
     a4c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a50:	80 91 e2 00 	lds	r24, 0x00E2
     a54:	80 61       	ori	r24, 0x10	; 16
     a56:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a5a:	42 e0       	ldi	r20, 0x02	; 2
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	27 de       	rcall	.-946    	; 0x6b0 <Endpoint_ConfigureEndpoint_Prv>
     a62:	58 d1       	rcall	.+688    	; 0xd14 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	0f 90       	pop	r0
     a7e:	0b be       	out	0x3b, r0	; 59
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	0f 90       	pop	r0
     a86:	1f 90       	pop	r1
     a88:	18 95       	reti

00000a8a <USB_Device_ProcessControlRequest>:
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	aa 97       	sbiw	r28, 0x2a	; 42
     a96:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	e1 ec       	ldi	r30, 0xC1	; 193
     aa2:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     aa4:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     aa8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     aaa:	21 e0       	ldi	r18, 0x01	; 1
     aac:	e9 3c       	cpi	r30, 0xC9	; 201
     aae:	f2 07       	cpc	r31, r18
     ab0:	c9 f7       	brne	.-14     	; 0xaa4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     ab2:	05 dc       	rcall	.-2038   	; 0x2be <EVENT_USB_Device_ControlRequest>
     ab4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ab8:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     aba:	14 c1       	rjmp	.+552    	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
     abc:	20 91 c1 01 	lds	r18, 0x01C1
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     ac0:	30 91 c2 01 	lds	r19, 0x01C2

		switch (USB_ControlRequest.bRequest)
     ac4:	83 2f       	mov	r24, r19
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	8a 30       	cpi	r24, 0x0A	; 10
     aca:	91 05       	cpc	r25, r1
     acc:	08 f0       	brcs	.+2      	; 0xad0 <USB_Device_ProcessControlRequest+0x46>
     ace:	0a c1       	rjmp	.+532    	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
     ad0:	fc 01       	movw	r30, r24
     ad2:	e4 5b       	subi	r30, 0xB4	; 180
     ad4:	ff 4f       	sbci	r31, 0xFF	; 255
     ad6:	39 c3       	rjmp	.+1650   	; 0x114a <__tablejump2__>
     ad8:	20 38       	cpi	r18, 0x80	; 128
     ada:	81 f0       	breq	.+32     	; 0xafc <USB_Device_ProcessControlRequest+0x72>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     adc:	22 38       	cpi	r18, 0x82	; 130
     ade:	09 f0       	breq	.+2      	; 0xae2 <USB_Device_ProcessControlRequest+0x58>
     ae0:	01 c1       	rjmp	.+514    	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
     ae2:	80 91 c5 01 	lds	r24, 0x01C5
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ae6:	8f 70       	andi	r24, 0x0F	; 15
     ae8:	80 93 e9 00 	sts	0x00E9, r24
     aec:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     af0:	85 fb       	bst	r24, 5
     af2:	88 27       	eor	r24, r24
     af4:	80 f9       	bld	r24, 0
     af6:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     afa:	06 c0       	rjmp	.+12     	; 0xb08 <USB_Device_ProcessControlRequest+0x7e>
     afc:	80 91 bd 01 	lds	r24, 0x01BD
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     b00:	90 91 be 01 	lds	r25, 0x01BE
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b04:	91 11       	cpse	r25, r1
     b06:	82 60       	ori	r24, 0x02	; 2
     b08:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b0c:	97 7f       	andi	r25, 0xF7	; 247
     b0e:	90 93 e8 00 	sts	0x00E8, r25
     b12:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b16:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     b1a:	c1 c0       	rjmp	.+386    	; 0xc9e <USB_Device_ProcessControlRequest+0x214>
     b1c:	82 2f       	mov	r24, r18
     b1e:	8d 7f       	andi	r24, 0xFD	; 253
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b20:	09 f0       	breq	.+2      	; 0xb24 <USB_Device_ProcessControlRequest+0x9a>
     b22:	e0 c0       	rjmp	.+448    	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
     b24:	22 23       	and	r18, r18
     b26:	19 f0       	breq	.+6      	; 0xb2e <USB_Device_ProcessControlRequest+0xa4>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b28:	22 30       	cpi	r18, 0x02	; 2
     b2a:	61 f0       	breq	.+24     	; 0xb44 <USB_Device_ProcessControlRequest+0xba>
     b2c:	db c0       	rjmp	.+438    	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
     b2e:	80 91 c3 01 	lds	r24, 0x01C3
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b32:	81 30       	cpi	r24, 0x01	; 1
     b34:	09 f0       	breq	.+2      	; 0xb38 <USB_Device_ProcessControlRequest+0xae>
     b36:	d6 c0       	rjmp	.+428    	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
     b38:	33 30       	cpi	r19, 0x03	; 3
     b3a:	09 f0       	breq	.+2      	; 0xb3e <USB_Device_ProcessControlRequest+0xb4>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	80 93 be 01 	sts	0x01BE, r24
     b42:	28 c0       	rjmp	.+80     	; 0xb94 <USB_Device_ProcessControlRequest+0x10a>
     b44:	80 91 c3 01 	lds	r24, 0x01C3

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b48:	81 11       	cpse	r24, r1
     b4a:	24 c0       	rjmp	.+72     	; 0xb94 <USB_Device_ProcessControlRequest+0x10a>
     b4c:	20 91 c5 01 	lds	r18, 0x01C5
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b50:	2f 70       	andi	r18, 0x0F	; 15
     b52:	09 f4       	brne	.+2      	; 0xb56 <USB_Device_ProcessControlRequest+0xcc>
     b54:	c7 c0       	rjmp	.+398    	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b56:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b5a:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b5e:	80 ff       	sbrs	r24, 0
     b60:	19 c0       	rjmp	.+50     	; 0xb94 <USB_Device_ProcessControlRequest+0x10a>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b62:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b66:	33 30       	cpi	r19, 0x03	; 3
     b68:	11 f4       	brne	.+4      	; 0xb6e <USB_Device_ProcessControlRequest+0xe4>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b6a:	80 62       	ori	r24, 0x20	; 32
     b6c:	11 c0       	rjmp	.+34     	; 0xb90 <USB_Device_ProcessControlRequest+0x106>
     b6e:	80 61       	ori	r24, 0x10	; 16
     b70:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b78:	02 2e       	mov	r0, r18
     b7a:	01 c0       	rjmp	.+2      	; 0xb7e <USB_Device_ProcessControlRequest+0xf4>
     b7c:	88 0f       	add	r24, r24
     b7e:	0a 94       	dec	r0
     b80:	ea f7       	brpl	.-6      	; 0xb7c <USB_Device_ProcessControlRequest+0xf2>
     b82:	80 93 ea 00 	sts	0x00EA, r24
     b86:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     b8a:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b8e:	88 60       	ori	r24, 0x08	; 8
     b90:	80 93 eb 00 	sts	0x00EB, r24
     b94:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b98:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b9c:	87 7f       	andi	r24, 0xF7	; 247
     b9e:	82 c0       	rjmp	.+260    	; 0xca4 <USB_Device_ProcessControlRequest+0x21a>
     ba0:	21 11       	cpse	r18, r1
     ba2:	a0 c0       	rjmp	.+320    	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ba4:	10 91 c3 01 	lds	r17, 0x01C3
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     ba8:	1f 77       	andi	r17, 0x7F	; 127
     baa:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     bae:	80 78       	andi	r24, 0x80	; 128
     bb0:	81 2b       	or	r24, r17
     bb2:	80 93 e3 00 	sts	0x00E3, r24
     bb6:	80 91 e8 00 	lds	r24, 0x00E8
     bba:	87 7f       	andi	r24, 0xF7	; 247
     bbc:	80 93 e8 00 	sts	0x00E8, r24
     bc0:	e9 dd       	rcall	.-1070   	; 0x794 <Endpoint_ClearStatusStage>
     bc2:	80 91 e8 00 	lds	r24, 0x00E8

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     bc6:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bc8:	fc cf       	rjmp	.-8      	; 0xbc2 <USB_Device_ProcessControlRequest+0x138>
     bca:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     bce:	80 68       	ori	r24, 0x80	; 128
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     bd0:	80 93 e3 00 	sts	0x00E3, r24
     bd4:	11 23       	and	r17, r17
     bd6:	11 f0       	breq	.+4      	; 0xbdc <USB_Device_ProcessControlRequest+0x152>
     bd8:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     bda:	01 c0       	rjmp	.+2      	; 0xbde <USB_Device_ProcessControlRequest+0x154>
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	80 93 c0 01 	sts	0x01C0, r24
     be2:	80 c0       	rjmp	.+256    	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
     be4:	20 58       	subi	r18, 0x80	; 128
     be6:	22 30       	cpi	r18, 0x02	; 2
     be8:	08 f0       	brcs	.+2      	; 0xbec <USB_Device_ProcessControlRequest+0x162>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bea:	7c c0       	rjmp	.+248    	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
     bec:	80 91 c3 01 	lds	r24, 0x01C3
     bf0:	90 91 c4 01 	lds	r25, 0x01C4
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     bf4:	8c 3d       	cpi	r24, 0xDC	; 220
     bf6:	23 e0       	ldi	r18, 0x03	; 3
     bf8:	92 07       	cpc	r25, r18
     bfa:	71 f5       	brne	.+92     	; 0xc58 <USB_Device_ProcessControlRequest+0x1ce>
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	8a 83       	std	Y+2, r24	; 0x02
     c00:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     c02:	89 83       	std	Y+1, r24	; 0x01
     c04:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c06:	f8 94       	cli
     c08:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c0a:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c0c:	20 e0       	ldi	r18, 0x00	; 0
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     c0e:	3e e0       	ldi	r19, 0x0E	; 14
     c10:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c12:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     c14:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c16:	50 93 57 00 	sts	0x0057, r21
     c1a:	e4 91       	lpm	r30, Z
     c1c:	20 ff       	sbrs	r18, 0
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <USB_Device_ProcessControlRequest+0x19c>
     c20:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     c22:	ef 70       	andi	r30, 0x0F	; 15
     c24:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     c26:	ef 70       	andi	r30, 0x0F	; 15
     c28:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     c2a:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     c2c:	ea 30       	cpi	r30, 0x0A	; 10
     c2e:	10 f0       	brcs	.+4      	; 0xc34 <USB_Device_ProcessControlRequest+0x1aa>
     c30:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <USB_Device_ProcessControlRequest+0x1ac>
     c34:	c0 96       	adiw	r24, 0x30	; 48
     c36:	8d 93       	st	X+, r24
     c38:	9d 93       	st	X+, r25
     c3a:	2f 5f       	subi	r18, 0xFF	; 255
     c3c:	24 31       	cpi	r18, 0x14	; 20
     c3e:	49 f7       	brne	.-46     	; 0xc12 <USB_Device_ProcessControlRequest+0x188>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c40:	4f bf       	out	0x3f, r20	; 63
     c42:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c46:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c48:	80 93 e8 00 	sts	0x00E8, r24
     c4c:	6a e2       	ldi	r22, 0x2A	; 42
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	3a dc       	rcall	.-1932   	; 0x4ca <Endpoint_Write_Control_Stream_LE>
     c56:	12 c0       	rjmp	.+36     	; 0xc7c <USB_Device_ProcessControlRequest+0x1f2>
     c58:	ae 01       	movw	r20, r28
     c5a:	4f 5f       	subi	r20, 0xFF	; 255
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
     c5e:	60 91 c5 01 	lds	r22, 0x01C5
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c62:	a8 db       	rcall	.-2224   	; 0x3b4 <CALLBACK_USB_GetDescriptor>
     c64:	00 97       	sbiw	r24, 0x00	; 0
     c66:	09 f4       	brne	.+2      	; 0xc6a <USB_Device_ProcessControlRequest+0x1e0>
     c68:	3d c0       	rjmp	.+122    	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
     c6a:	20 91 e8 00 	lds	r18, 0x00E8
     c6e:	27 7f       	andi	r18, 0xF7	; 247
     c70:	20 93 e8 00 	sts	0x00E8, r18
     c74:	bc 01       	movw	r22, r24
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	be dc       	rcall	.-1668   	; 0x5f8 <Endpoint_Write_Control_PStream_LE>
     c7c:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c80:	8b 77       	andi	r24, 0x7B	; 123
     c82:	80 93 e8 00 	sts	0x00E8, r24
     c86:	2e c0       	rjmp	.+92     	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c88:	20 38       	cpi	r18, 0x80	; 128
     c8a:	61 f5       	brne	.+88     	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
     c8c:	80 91 e8 00 	lds	r24, 0x00E8
     c90:	87 7f       	andi	r24, 0xF7	; 247
     c92:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c96:	80 91 bc 01 	lds	r24, 0x01BC
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c9a:	80 93 f1 00 	sts	0x00F1, r24
     c9e:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     ca2:	8e 77       	andi	r24, 0x7E	; 126
     ca4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ca8:	75 dd       	rcall	.-1302   	; 0x794 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     caa:	1c c0       	rjmp	.+56     	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
     cac:	21 11       	cpse	r18, r1
     cae:	1a c0       	rjmp	.+52     	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
     cb0:	90 91 c3 01 	lds	r25, 0x01C3
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     cb4:	92 30       	cpi	r25, 0x02	; 2
     cb6:	b0 f4       	brcc	.+44     	; 0xce4 <USB_Device_ProcessControlRequest+0x25a>
     cb8:	80 91 e8 00 	lds	r24, 0x00E8
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cbc:	87 7f       	andi	r24, 0xF7	; 247
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     cbe:	80 93 e8 00 	sts	0x00E8, r24
     cc2:	90 93 bc 01 	sts	0x01BC, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cc6:	66 dd       	rcall	.-1332   	; 0x794 <Endpoint_ClearStatusStage>
     cc8:	80 91 bc 01 	lds	r24, 0x01BC
     ccc:	81 11       	cpse	r24, r1
     cce:	04 c0       	rjmp	.+8      	; 0xcd8 <USB_Device_ProcessControlRequest+0x24e>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cd0:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     cd4:	87 ff       	sbrs	r24, 7
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <USB_Device_ProcessControlRequest+0x252>

	if (USB_Device_ConfigurationNumber)
     cd8:	84 e0       	ldi	r24, 0x04	; 4
     cda:	01 c0       	rjmp	.+2      	; 0xcde <USB_Device_ProcessControlRequest+0x254>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	80 93 c0 01 	sts	0x01C0, r24
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ce2:	df da       	rcall	.-2626   	; 0x2a2 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ce4:	80 91 e8 00 	lds	r24, 0x00E8
     ce8:	83 ff       	sbrs	r24, 3
     cea:	0a c0       	rjmp	.+20     	; 0xd00 <USB_Device_ProcessControlRequest+0x276>
     cec:	80 91 e8 00 	lds	r24, 0x00E8
     cf0:	87 7f       	andi	r24, 0xF7	; 247

	EVENT_USB_Device_ConfigurationChanged();
     cf2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cf6:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     cfa:	80 62       	ori	r24, 0x20	; 32
     cfc:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d00:	aa 96       	adiw	r28, 0x2a	; 42
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d12:	08 95       	ret

00000d14 <USB_Event_Stub>:
     d14:	08 95       	ret

00000d16 <USB_USBTask>:
     d16:	cf 93       	push	r28
     d18:	80 91 c0 01 	lds	r24, 0x01C0
     d1c:	88 23       	and	r24, r24
     d1e:	a9 f0       	breq	.+42     	; 0xd4a <USB_USBTask+0x34>
     d20:	80 91 e9 00 	lds	r24, 0x00E9
     d24:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d26:	90 91 ec 00 	lds	r25, 0x00EC
     d2a:	90 ff       	sbrs	r25, 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <USB_USBTask+0x1c>
     d2e:	90 e8       	ldi	r25, 0x80	; 128
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <USB_USBTask+0x1e>
     d32:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d34:	c9 2f       	mov	r28, r25
     d36:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d38:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d3c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d40:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     d42:	a3 de       	rcall	.-698    	; 0xa8a <USB_Device_ProcessControlRequest>
     d44:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d46:	c0 93 e9 00 	sts	0x00E9, r28
     d4a:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d4c:	08 95       	ret

00000d4e <HID_Device_ProcessControlRequest>:
     d4e:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     d50:	7f 92       	push	r7
     d52:	8f 92       	push	r8
     d54:	9f 92       	push	r9
     d56:	af 92       	push	r10
     d58:	bf 92       	push	r11
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <HID_Device_ProcessControlRequest+0x1e>
     d6c:	1f 92       	push	r1
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     d74:	ad b6       	in	r10, 0x3d	; 61
     d76:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d78:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     d7c:	83 ff       	sbrs	r24, 3
     d7e:	fe c0       	rjmp	.+508    	; 0xf7c <HID_Device_ProcessControlRequest+0x22e>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     d80:	f7 01       	movw	r30, r14
     d82:	80 81       	ld	r24, Z
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	20 91 c5 01 	lds	r18, 0x01C5
     d8a:	30 91 c6 01 	lds	r19, 0x01C6
     d8e:	28 17       	cp	r18, r24
     d90:	39 07       	cpc	r19, r25
     d92:	09 f0       	breq	.+2      	; 0xd96 <HID_Device_ProcessControlRequest+0x48>
     d94:	f3 c0       	rjmp	.+486    	; 0xf7c <HID_Device_ProcessControlRequest+0x22e>
	  return;

	switch (USB_ControlRequest.bRequest)
     d96:	80 91 c2 01 	lds	r24, 0x01C2
     d9a:	83 30       	cpi	r24, 0x03	; 3
     d9c:	09 f4       	brne	.+2      	; 0xda0 <HID_Device_ProcessControlRequest+0x52>
     d9e:	95 c0       	rjmp	.+298    	; 0xeca <HID_Device_ProcessControlRequest+0x17c>
     da0:	30 f4       	brcc	.+12     	; 0xdae <HID_Device_ProcessControlRequest+0x60>
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	71 f0       	breq	.+28     	; 0xdc2 <HID_Device_ProcessControlRequest+0x74>
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	09 f4       	brne	.+2      	; 0xdac <HID_Device_ProcessControlRequest+0x5e>
     daa:	cc c0       	rjmp	.+408    	; 0xf44 <HID_Device_ProcessControlRequest+0x1f6>
     dac:	e7 c0       	rjmp	.+462    	; 0xf7c <HID_Device_ProcessControlRequest+0x22e>
     dae:	8a 30       	cpi	r24, 0x0A	; 10
     db0:	09 f4       	brne	.+2      	; 0xdb4 <HID_Device_ProcessControlRequest+0x66>
     db2:	b0 c0       	rjmp	.+352    	; 0xf14 <HID_Device_ProcessControlRequest+0x1c6>
     db4:	8b 30       	cpi	r24, 0x0B	; 11
     db6:	09 f4       	brne	.+2      	; 0xdba <HID_Device_ProcessControlRequest+0x6c>
     db8:	99 c0       	rjmp	.+306    	; 0xeec <HID_Device_ProcessControlRequest+0x19e>
     dba:	89 30       	cpi	r24, 0x09	; 9
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <HID_Device_ProcessControlRequest+0x72>
     dbe:	de c0       	rjmp	.+444    	; 0xf7c <HID_Device_ProcessControlRequest+0x22e>
     dc0:	47 c0       	rjmp	.+142    	; 0xe50 <HID_Device_ProcessControlRequest+0x102>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     dc2:	80 91 c1 01 	lds	r24, 0x01C1
     dc6:	81 3a       	cpi	r24, 0xA1	; 161
     dc8:	09 f0       	breq	.+2      	; 0xdcc <HID_Device_ProcessControlRequest+0x7e>
     dca:	d8 c0       	rjmp	.+432    	; 0xf7c <HID_Device_ProcessControlRequest+0x22e>
     dcc:	8d b6       	in	r8, 0x3d	; 61
     dce:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     dd0:	1a 82       	std	Y+2, r1	; 0x02
     dd2:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     dd4:	80 91 c3 01 	lds	r24, 0x01C3
     dd8:	10 91 c4 01 	lds	r17, 0x01C4
     ddc:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     dde:	f7 01       	movw	r30, r14
     de0:	40 85       	ldd	r20, Z+8	; 0x08
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	8d b7       	in	r24, 0x3d	; 61
     de6:	9e b7       	in	r25, 0x3e	; 62
     de8:	84 1b       	sub	r24, r20
     dea:	95 0b       	sbc	r25, r21
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	9e bf       	out	0x3e, r25	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	8d bf       	out	0x3d, r24	; 61
     df6:	ed b7       	in	r30, 0x3d	; 61
     df8:	fe b7       	in	r31, 0x3e	; 62
     dfa:	31 96       	adiw	r30, 0x01	; 1
     dfc:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	cf 01       	movw	r24, r30
     e04:	be d1       	rcall	.+892    	; 0x1182 <memset>
     e06:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     e08:	41 0f       	add	r20, r17
     e0a:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     e0c:	0f 5f       	subi	r16, 0xFF	; 255
     e0e:	1f 4f       	sbci	r17, 0xFF	; 255
     e10:	96 01       	movw	r18, r12
     e12:	be 01       	movw	r22, r28
     e14:	6d 5f       	subi	r22, 0xFD	; 253
     e16:	7f 4f       	sbci	r23, 0xFF	; 255
     e18:	c7 01       	movw	r24, r14
     e1a:	60 da       	rcall	.-2880   	; 0x2dc <CALLBACK_HID_Device_CreateHIDReport>
     e1c:	f7 01       	movw	r30, r14
     e1e:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     e20:	97 81       	ldd	r25, Z+7	; 0x07
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	21 f0       	breq	.+8      	; 0xe2e <HID_Device_ProcessControlRequest+0xe0>
     e26:	40 85       	ldd	r20, Z+8	; 0x08
     e28:	50 e0       	ldi	r21, 0x00	; 0
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     e2a:	b6 01       	movw	r22, r12
     e2c:	a1 d1       	rcall	.+834    	; 0x1170 <memcpy>
     e2e:	10 92 e9 00 	sts	0x00E9, r1
     e32:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e36:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e38:	80 93 e8 00 	sts	0x00E8, r24
     e3c:	69 81       	ldd	r22, Y+1	; 0x01
     e3e:	7a 81       	ldd	r23, Y+2	; 0x02
     e40:	c6 01       	movw	r24, r12
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     e42:	43 db       	rcall	.-2426   	; 0x4ca <Endpoint_Write_Control_Stream_LE>
     e44:	80 91 e8 00 	lds	r24, 0x00E8
     e48:	8b 77       	andi	r24, 0x7B	; 123
     e4a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e4e:	37 c0       	rjmp	.+110    	; 0xebe <HID_Device_ProcessControlRequest+0x170>
     e50:	80 91 c1 01 	lds	r24, 0x01C1
     e54:	81 32       	cpi	r24, 0x21	; 33
     e56:	09 f0       	breq	.+2      	; 0xe5a <HID_Device_ProcessControlRequest+0x10c>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e58:	91 c0       	rjmp	.+290    	; 0xf7c <HID_Device_ProcessControlRequest+0x22e>
     e5a:	8d b6       	in	r8, 0x3d	; 61
     e5c:	9e b6       	in	r9, 0x3e	; 62
     e5e:	00 91 c7 01 	lds	r16, 0x01C7
     e62:	10 91 c8 01 	lds	r17, 0x01C8
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     e66:	70 90 c3 01 	lds	r7, 0x01C3
     e6a:	60 90 c4 01 	lds	r6, 0x01C4
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     e6e:	8d b7       	in	r24, 0x3d	; 61
     e70:	9e b7       	in	r25, 0x3e	; 62
     e72:	80 1b       	sub	r24, r16
     e74:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	9e bf       	out	0x3e, r25	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	8d bf       	out	0x3d, r24	; 61
     e80:	ed b7       	in	r30, 0x3d	; 61
     e82:	fe b7       	in	r31, 0x3e	; 62
     e84:	31 96       	adiw	r30, 0x01	; 1
     e86:	6f 01       	movw	r12, r30
     e88:	80 91 e8 00 	lds	r24, 0x00E8
     e8c:	87 7f       	andi	r24, 0xF7	; 247
     e8e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e92:	b8 01       	movw	r22, r16
     e94:	cf 01       	movw	r24, r30
     e96:	72 db       	rcall	.-2332   	; 0x57c <Endpoint_Read_Control_Stream_LE>
     e98:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     e9c:	8e 77       	andi	r24, 0x7E	; 126
     e9e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	71 10       	cpse	r7, r1
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <HID_Device_ProcessControlRequest+0x15c>
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     eac:	02 1b       	sub	r16, r18
     eae:	13 0b       	sbc	r17, r19
     eb0:	2c 0d       	add	r18, r12
     eb2:	3d 1d       	adc	r19, r13
     eb4:	4f ef       	ldi	r20, 0xFF	; 255
     eb6:	46 0d       	add	r20, r6
     eb8:	67 2d       	mov	r22, r7
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     eba:	c7 01       	movw	r24, r14
     ebc:	7a da       	rcall	.-2828   	; 0x3b2 <CALLBACK_HID_Device_ProcessHIDReport>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     ec2:	9e be       	out	0x3e, r9	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	8d be       	out	0x3d, r8	; 61
     ec8:	59 c0       	rjmp	.+178    	; 0xf7c <HID_Device_ProcessControlRequest+0x22e>
     eca:	80 91 c1 01 	lds	r24, 0x01C1
     ece:	81 3a       	cpi	r24, 0xA1	; 161
     ed0:	09 f0       	breq	.+2      	; 0xed4 <HID_Device_ProcessControlRequest+0x186>
     ed2:	54 c0       	rjmp	.+168    	; 0xf7c <HID_Device_ProcessControlRequest+0x22e>
     ed4:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ed8:	87 7f       	andi	r24, 0xF7	; 247
     eda:	80 93 e8 00 	sts	0x00E8, r24
     ede:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ee2:	80 ff       	sbrs	r24, 0
     ee4:	fc cf       	rjmp	.-8      	; 0xede <HID_Device_ProcessControlRequest+0x190>
     ee6:	f7 01       	movw	r30, r14
     ee8:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     eea:	40 c0       	rjmp	.+128    	; 0xf6c <HID_Device_ProcessControlRequest+0x21e>
     eec:	80 91 c1 01 	lds	r24, 0x01C1
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     ef0:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     ef2:	09 f0       	breq	.+2      	; 0xef6 <HID_Device_ProcessControlRequest+0x1a8>
     ef4:	43 c0       	rjmp	.+134    	; 0xf7c <HID_Device_ProcessControlRequest+0x22e>
     ef6:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     efa:	87 7f       	andi	r24, 0xF7	; 247
     efc:	80 93 e8 00 	sts	0x00E8, r24
     f00:	49 dc       	rcall	.-1902   	; 0x794 <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f02:	90 91 c3 01 	lds	r25, 0x01C3
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	91 11       	cpse	r25, r1
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <HID_Device_ProcessControlRequest+0x1c0>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     f10:	81 87       	std	Z+9, r24	; 0x09
     f12:	34 c0       	rjmp	.+104    	; 0xf7c <HID_Device_ProcessControlRequest+0x22e>
     f14:	80 91 c1 01 	lds	r24, 0x01C1
     f18:	81 32       	cpi	r24, 0x21	; 33
     f1a:	81 f5       	brne	.+96     	; 0xf7c <HID_Device_ProcessControlRequest+0x22e>
     f1c:	80 91 e8 00 	lds	r24, 0x00E8
     f20:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f22:	80 93 e8 00 	sts	0x00E8, r24
     f26:	36 dc       	rcall	.-1940   	; 0x794 <Endpoint_ClearStatusStage>
     f28:	80 91 c3 01 	lds	r24, 0x01C3
     f2c:	90 91 c4 01 	lds	r25, 0x01C4
     f30:	88 27       	eor	r24, r24
     f32:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f34:	96 95       	lsr	r25
     f36:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     f38:	3a 95       	dec	r19
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <HID_Device_ProcessControlRequest+0x1e6>
     f3c:	f7 01       	movw	r30, r14
     f3e:	95 87       	std	Z+13, r25	; 0x0d
     f40:	84 87       	std	Z+12, r24	; 0x0c
     f42:	1c c0       	rjmp	.+56     	; 0xf7c <HID_Device_ProcessControlRequest+0x22e>
     f44:	80 91 c1 01 	lds	r24, 0x01C1
     f48:	81 3a       	cpi	r24, 0xA1	; 161
     f4a:	c1 f4       	brne	.+48     	; 0xf7c <HID_Device_ProcessControlRequest+0x22e>
     f4c:	80 91 e8 00 	lds	r24, 0x00E8
     f50:	87 7f       	andi	r24, 0xF7	; 247
     f52:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f56:	80 91 e8 00 	lds	r24, 0x00E8
     f5a:	80 ff       	sbrs	r24, 0
     f5c:	fc cf       	rjmp	.-8      	; 0xf56 <HID_Device_ProcessControlRequest+0x208>
     f5e:	f7 01       	movw	r30, r14
     f60:	84 85       	ldd	r24, Z+12	; 0x0c
     f62:	95 85       	ldd	r25, Z+13	; 0x0d
     f64:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f66:	87 95       	ror	r24
     f68:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     f6a:	87 95       	ror	r24
     f6c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     f70:	80 91 e8 00 	lds	r24, 0x00E8
     f74:	8e 77       	andi	r24, 0x7E	; 126
     f76:	80 93 e8 00 	sts	0x00E8, r24
     f7a:	0c dc       	rcall	.-2024   	; 0x794 <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f80:	be be       	out	0x3e, r11	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	ad be       	out	0x3d, r10	; 61
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     f8a:	0f 90       	pop	r0
     f8c:	df 91       	pop	r29
			}

			break;
	}
}
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	bf 90       	pop	r11
     f9e:	af 90       	pop	r10
     fa0:	9f 90       	pop	r9
     fa2:	8f 90       	pop	r8
     fa4:	7f 90       	pop	r7
     fa6:	6f 90       	pop	r6
     fa8:	08 95       	ret

00000faa <HID_Device_ConfigureEndpoints>:
     faa:	fc 01       	movw	r30, r24
     fac:	39 96       	adiw	r30, 0x09	; 9
     fae:	27 e0       	ldi	r18, 0x07	; 7
     fb0:	df 01       	movw	r26, r30
     fb2:	1d 92       	st	X+, r1
     fb4:	2a 95       	dec	r18
     fb6:	e9 f7       	brne	.-6      	; 0xfb2 <HID_Device_ConfigureEndpoints+0x8>
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	fc 01       	movw	r30, r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     fbc:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     fbe:	24 ef       	ldi	r18, 0xF4	; 244
     fc0:	31 e0       	ldi	r19, 0x01	; 1
     fc2:	35 87       	std	Z+13, r19	; 0x0d
     fc4:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     fc6:	23 e0       	ldi	r18, 0x03	; 3
     fc8:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	a5 cb       	rjmp	.-2230   	; 0x71a <Endpoint_ConfigureEndpointTable>

00000fd0 <HID_Device_USBTask>:
     fd0:	5f 92       	push	r5

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     fd2:	6f 92       	push	r6
     fd4:	7f 92       	push	r7
     fd6:	8f 92       	push	r8
     fd8:	9f 92       	push	r9
     fda:	af 92       	push	r10
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	00 d0       	rcall	.+0      	; 0xff0 <HID_Device_USBTask+0x20>
     ff0:	1f 92       	push	r1
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     ff8:	ad b6       	in	r10, 0x3d	; 61
     ffa:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     ffc:	80 91 c0 01 	lds	r24, 0x01C0
    1000:	84 30       	cpi	r24, 0x04	; 4
    1002:	09 f0       	breq	.+2      	; 0x1006 <HID_Device_USBTask+0x36>
    1004:	8a c0       	rjmp	.+276    	; 0x111a <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1006:	80 91 e4 00 	lds	r24, 0x00E4
    100a:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    100e:	f7 01       	movw	r30, r14
    1010:	22 85       	ldd	r18, Z+10	; 0x0a
    1012:	33 85       	ldd	r19, Z+11	; 0x0b
    1014:	28 17       	cp	r18, r24
    1016:	39 07       	cpc	r19, r25
    1018:	09 f4       	brne	.+2      	; 0x101c <HID_Device_USBTask+0x4c>
    101a:	7f c0       	rjmp	.+254    	; 0x111a <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    101c:	81 81       	ldd	r24, Z+1	; 0x01
    101e:	8f 70       	andi	r24, 0x0F	; 15
    1020:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1024:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1028:	85 ff       	sbrs	r24, 5
    102a:	77 c0       	rjmp	.+238    	; 0x111a <HID_Device_USBTask+0x14a>
    102c:	8d b6       	in	r8, 0x3d	; 61
    102e:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1030:	40 85       	ldd	r20, Z+8	; 0x08
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	8d b7       	in	r24, 0x3d	; 61
    1036:	9e b7       	in	r25, 0x3e	; 62
    1038:	84 1b       	sub	r24, r20
    103a:	95 0b       	sbc	r25, r21
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	9e bf       	out	0x3e, r25	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	8d bf       	out	0x3d, r24	; 61
    1046:	ed b7       	in	r30, 0x3d	; 61
    1048:	fe b7       	in	r31, 0x3e	; 62
    104a:	31 96       	adiw	r30, 0x01	; 1
    104c:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    104e:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1050:	1a 82       	std	Y+2, r1	; 0x02
    1052:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	cf 01       	movw	r24, r30
    105a:	93 d0       	rcall	.+294    	; 0x1182 <memset>
    105c:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    105e:	0f 5f       	subi	r16, 0xFF	; 255
    1060:	1f 4f       	sbci	r17, 0xFF	; 255
    1062:	96 01       	movw	r18, r12
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	be 01       	movw	r22, r28
    1068:	6d 5f       	subi	r22, 0xFD	; 253
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	c7 01       	movw	r24, r14
    106e:	36 d9       	rcall	.-3476   	; 0x2dc <CALLBACK_HID_Device_CreateHIDReport>
    1070:	68 2e       	mov	r6, r24
    1072:	f7 01       	movw	r30, r14
    1074:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1076:	95 85       	ldd	r25, Z+13	; 0x0d
    1078:	89 2b       	or	r24, r25
    107a:	41 f0       	breq	.+16     	; 0x108c <HID_Device_USBTask+0xbc>
    107c:	21 e0       	ldi	r18, 0x01	; 1
    107e:	86 85       	ldd	r24, Z+14	; 0x0e
    1080:	97 85       	ldd	r25, Z+15	; 0x0f
    1082:	89 2b       	or	r24, r25
    1084:	09 f0       	breq	.+2      	; 0x1088 <HID_Device_USBTask+0xb8>
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	72 2e       	mov	r7, r18
    108a:	01 c0       	rjmp	.+2      	; 0x108e <HID_Device_USBTask+0xbe>
    108c:	71 2c       	mov	r7, r1
    108e:	f7 01       	movw	r30, r14
    1090:	06 81       	ldd	r16, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1092:	17 81       	ldd	r17, Z+7	; 0x07
    1094:	01 15       	cp	r16, r1
    1096:	11 05       	cpc	r17, r1
    1098:	89 f0       	breq	.+34     	; 0x10bc <HID_Device_USBTask+0xec>
    109a:	49 81       	ldd	r20, Y+1	; 0x01
    109c:	5a 81       	ldd	r21, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    109e:	b8 01       	movw	r22, r16
    10a0:	c6 01       	movw	r24, r12
    10a2:	59 d0       	rcall	.+178    	; 0x1156 <memcmp>
    10a4:	55 24       	eor	r5, r5
    10a6:	53 94       	inc	r5
    10a8:	89 2b       	or	r24, r25
    10aa:	09 f4       	brne	.+2      	; 0x10ae <HID_Device_USBTask+0xde>
    10ac:	51 2c       	mov	r5, r1
    10ae:	f7 01       	movw	r30, r14
    10b0:	40 85       	ldd	r20, Z+8	; 0x08
    10b2:	50 e0       	ldi	r21, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    10b4:	b6 01       	movw	r22, r12
    10b6:	c8 01       	movw	r24, r16
    10b8:	5b d0       	rcall	.+182    	; 0x1170 <memcpy>
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <HID_Device_USBTask+0xee>
    10bc:	51 2c       	mov	r5, r1
    10be:	29 81       	ldd	r18, Y+1	; 0x01
    10c0:	3a 81       	ldd	r19, Y+2	; 0x02
    10c2:	23 2b       	or	r18, r19

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    10c4:	f1 f0       	breq	.+60     	; 0x1102 <HID_Device_USBTask+0x132>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    10c6:	61 10       	cpse	r6, r1
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <HID_Device_USBTask+0x102>
    10ca:	51 10       	cpse	r5, r1
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <HID_Device_USBTask+0x102>
    10ce:	70 fe       	sbrs	r7, 0
    10d0:	18 c0       	rjmp	.+48     	; 0x1102 <HID_Device_USBTask+0x132>
    10d2:	f7 01       	movw	r30, r14
    10d4:	84 85       	ldd	r24, Z+12	; 0x0c
    10d6:	95 85       	ldd	r25, Z+13	; 0x0d
    10d8:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    10da:	86 87       	std	Z+14, r24	; 0x0e
    10dc:	81 81       	ldd	r24, Z+1	; 0x01
    10de:	8f 70       	andi	r24, 0x0F	; 15
    10e0:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	81 11       	cpse	r24, r1
    10e8:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    10ec:	69 81       	ldd	r22, Y+1	; 0x01
    10ee:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	50 e0       	ldi	r21, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    10f4:	c6 01       	movw	r24, r12
    10f6:	a1 d9       	rcall	.-3262   	; 0x43a <Endpoint_Write_Stream_LE>
    10f8:	80 91 e8 00 	lds	r24, 0x00E8
    10fc:	8e 77       	andi	r24, 0x7E	; 126
    10fe:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1102:	80 91 e4 00 	lds	r24, 0x00E4
    1106:	90 91 e5 00 	lds	r25, 0x00E5
    110a:	f7 01       	movw	r30, r14
    110c:	93 87       	std	Z+11, r25	; 0x0b
    110e:	82 87       	std	Z+10, r24	; 0x0a
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1114:	9e be       	out	0x3e, r9	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	8d be       	out	0x3d, r8	; 61
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	be be       	out	0x3e, r11	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	ad be       	out	0x3d, r10	; 61
	}
}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	df 90       	pop	r13
    1138:	cf 90       	pop	r12
    113a:	bf 90       	pop	r11
    113c:	af 90       	pop	r10
    113e:	9f 90       	pop	r9
    1140:	8f 90       	pop	r8
    1142:	7f 90       	pop	r7
    1144:	6f 90       	pop	r6
    1146:	5f 90       	pop	r5
    1148:	08 95       	ret

0000114a <__tablejump2__>:
    114a:	ee 0f       	add	r30, r30
    114c:	ff 1f       	adc	r31, r31

0000114e <__tablejump__>:
    114e:	05 90       	lpm	r0, Z+
    1150:	f4 91       	lpm	r31, Z
    1152:	e0 2d       	mov	r30, r0
    1154:	09 94       	ijmp

00001156 <memcmp>:
    1156:	fb 01       	movw	r30, r22
    1158:	dc 01       	movw	r26, r24
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <memcmp+0xe>
    115c:	8d 91       	ld	r24, X+
    115e:	01 90       	ld	r0, Z+
    1160:	80 19       	sub	r24, r0
    1162:	21 f4       	brne	.+8      	; 0x116c <memcmp+0x16>
    1164:	41 50       	subi	r20, 0x01	; 1
    1166:	50 40       	sbci	r21, 0x00	; 0
    1168:	c8 f7       	brcc	.-14     	; 0x115c <memcmp+0x6>
    116a:	88 1b       	sub	r24, r24
    116c:	99 0b       	sbc	r25, r25
    116e:	08 95       	ret

00001170 <memcpy>:
    1170:	fb 01       	movw	r30, r22
    1172:	dc 01       	movw	r26, r24
    1174:	02 c0       	rjmp	.+4      	; 0x117a <memcpy+0xa>
    1176:	01 90       	ld	r0, Z+
    1178:	0d 92       	st	X+, r0
    117a:	41 50       	subi	r20, 0x01	; 1
    117c:	50 40       	sbci	r21, 0x00	; 0
    117e:	d8 f7       	brcc	.-10     	; 0x1176 <memcpy+0x6>
    1180:	08 95       	ret

00001182 <memset>:
    1182:	dc 01       	movw	r26, r24
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <memset+0x6>
    1186:	6d 93       	st	X+, r22
    1188:	41 50       	subi	r20, 0x01	; 1
    118a:	50 40       	sbci	r21, 0x00	; 0
    118c:	e0 f7       	brcc	.-8      	; 0x1186 <memset+0x4>
    118e:	08 95       	ret

00001190 <_exit>:
    1190:	f8 94       	cli

00001192 <__stop_program>:
    1192:	ff cf       	rjmp	.-2      	; 0x1192 <__stop_program>
